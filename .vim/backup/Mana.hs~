{-# LANGUAGE FlexibleInstances #-}

module Magic.Mana where

import Data.List (sort)

data Color = White
           | Blue
           | Black
           | Red
           | Green
           deriving (Eq, Ord)

instance Show Color where
    show White = "W"
    show Blue  = "U"
    show Black = "B"
    show Red   = "R"
    show Green = "G"

data Variable = VarZ
              | VarY
              | VarX
              deriving (Eq, Ord)

instance Show Variable where
    show VarZ = "Z"
    show VarY = "Y"
    show VarX = "X"

data ManaSymbol = VarColorlessMana Variable
                | ColorlessMana Integer
                | HybridMana ManaSymbol ManaSymbol
                | PhyrexianMana Color
                | Mana Color
                | SnowMana
                deriving (Eq, Ord)

instance Show ManaSymbol where
    show (VarColorlessMana x)     = show x
    show (ColorlessMana n)        = show n
    show (HybridMana m1 m2) = "(" ++ show m1 ++ "/" ++ show m2 ++ ")"
    show (PhyrexianMana c)  = "(" ++ show c ++ "/" ++ "P)"
    show (Mana c)                 = show c
    show SnowMana                 = "S"

type ManaCost = [ManaSymbol]

instance Show [ManaSymbol] where
    show = concat . map show 
   

convertManaSymbol :: ManaSymbol -> Integer
convertManaSymbol (Mana _)             = 1
convertManaSymbol SnowMana             = 1
convertManaSymbol (VarColorlessMana _) = 0
convertManaSymbol (ColorlessMana n)    = n
convertManaSymbol (HybridMana m1 m2)   = max (convertManaSymbol m1) (convertManaSymbol m2)
convertManaSymbol (PhyrexianMana _)    = 1

convertManaCost :: ManaCost -> Integer
convertManaCost = sum . (map convertManaSymbol)

manaSymbolColors :: ManaSymbol -> [Color]
manaSymbolColors (Mana c)           = [c]
manaSymbolColors (PhyrexianMana c)  = [c]
manaSymbolColors (HybridMana m1 m2) = (manaSymbolColors m1) ++ (manaSymbolColors m2)
manaSymbolColors _                  = []

manaCostColors :: ManaCost -> [Color]
manaCostColors = sort . concat . (map manaSymbolColors)

