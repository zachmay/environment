\documentclass[12pt,letterpaper]{amspset}
\usepackage[margin=1in]{geometry}
\usepackage{graphicx}
\usepackage{enumerate}
\usepackage{algorithm}
\usepackage{algorithmic}

% info for header block in upper right hand corner
\name{Zachary May}
\class{CS 515}
\assignment{Homework 3}
\duedate{Oct. 6, 2011}

\setlength{\parindent}{0cm}
\setlength{\parskip}{2ex}

\begin{document}

\problemlist{}

\begin{problem}[7.4-2]
    Show that quicksort's best-case running time is $\Omega(n \log n)$.
\end{problem}

\begin{solution}
    Quicksort's best-case running time occurs when the array (with length $n$) can be partioned
    into into subarrays as close to $n/2$ as possible, e.g,. $\lfloor n/2 \rfloor$ and
    $\lceil n/2 \rceil$.

    The non-recursive work at each call involves $\Theta(n)$ time for typical partitioning schemes.

    This gives a recurrence relation for the running time of $T(n) = 2T(n/2) + f(n), f(n) \in \Theta(n)$.
    We can use the Master Theorem with $a = 2$ and $c = 2$. Note that $\log_c a = 1$.  

    We see that $f(n) \in \Theta(n^{\log_c a}) = \Theta(n)$, so by the Master Theorem 
    $T(n) \in \Theta(n \log n)$, therefore $T(n) \in \Omega(n \log n)$.
\end{solution}

\begin{problem}[7-4]

    \begin{enumerate}[a.]
        \item Argue that $\operatorname{tailRecursiveQuicksort}(A, 1, A.length)$ correctly sorts the
              array $A$.
        \item Describe a scenario in which $\operatorname{tailRecursiveQuicksort}$'s stack depth is
              $\Theta(n)$ on an $n$-element input array.
        \item Modify the code for $\operatorname{tailRecursiveQuicksort}$ so that the worst-case
              stack depth is $\Theta(\lg n)$. Maintain the $O(n \lg n)$ running time of the
              algorithm.
    \end{enumerate}
\end{problem}

\begin{solution}
    TODO TODO TODO
\end{solution}

\begin{problem}[6.1-5]
    Is an array that is in sorted order a min-heap?
\end{problem}

\begin{solution}
    The min-heap property states that for a min-heap $A = a_1, \cdots, a_n$, for every index $i$ in $A$,
    $a_{\operatorname{Parent}(i)} \le a_i$. $\operatorname{Parent}$ is defined as
    $\operatorname{Parent}(i) = \lfloor i/2 \rfloor$. Further, we know that for an array to be sorted (in
    ascending order), its elements must be monotonically non-decreasing; i.e., $a_i \le a_j$ when $i \le j$.

    We can see that $\operatorname{Parent}(i) < i$ for $i \ge 1$, so knowing that an array $A$ is sorted tells us
    that the min-heap property holds for all indices $i$ of $A$. Thus, $A$ is a min-heap.
\end{solution}

\begin{problem}[6.4-5]
    Show that when all elements are distinct, the best-case running time of
    $\operatorname{heapSort}$ is $\Omega(n \log n)$.
\end{problem}

\begin{solution}
    TODO TODO TODO
\end{solution}

\begin{problem}[8.1-3]
    Show that there is no comparison sort whose running time is linear for at least half of the
    $n!$ inputs of length $n$. What about a fracion of $1 / n$ of the inputs of length $n$?
    What about a fraction $1 / 2^n$?
\end{problem}

\begin{solution}
    TODO TODO TODO
\end{solution}

\begin{problem}[9-2 a-d]
    \begin{enumerate}[a.]
        \item BARF
        \item BARF
        \item BLARG
    \end{enumerate}
\end{problem}

\begin{solution}
    TODO TODO TODO
\end{solution}

\end{document}
