from math import floor

arr = [10,9,8,7,6,5,4,3,2,1]

def count_inversions(a):
    print(a)
    if len(a) < 2:
        return 0
    if len(a) == 2:
        if a[0] > a[1]:
            return 1
        else:
            return 0
    else:
        mid = len(a) / 2
        left = a[:mid]
        right = a[mid:]
        res = count_inversions(left) + count_inversions(right);
        print(res)
        return res


def merge_sort(a):
    print(a)
    if len(a) < 2:
        return (a, 0)
    if len(a) == 2:
        if a[0] > a[1]:
            a[0], a[1] = a[1], a[0]
            return (a, 1)
        else:
            return (a, 0)
    else:
        mid = len(a) / 2
        left = a[:mid]
        right = a[mid:]
        sorted_left, left_inversions = merge_sort(left)
        sorted_right, right_inversions = merge_sort(right)
        sorted, merge_inversions = merge(sorted_left, sorted_right)
        return (sorted, merge_inversions + left_inversions + right_inversions)

def merge(a, b):
    print("BEGIN MERGE")
    an = len(a)
    bn = len(b)
    toMerge = an + bn
    ai = bi = merged = 0
    inversions = 0
    out = [0 for i in range(an + bn) ]
    while merged != toMerge:
        print(out, a[ai:], b[bi:], inversions)
        if ai < an and bi < bn:
            if a[ai] <= b[bi]:
                out[merged] = a[ai]
                merged = merged + 1
                ai = ai + 1
            else:
                out[merged] = b[bi]
                merged = merged + 1
                bi = bi + 1
                inversions = inversions + an - ai
        elif ai >= an:
            out[merged] = b[bi]
            merged = merged + 1
            bi = bi + 1
        elif bi >= bn:
            out[merged] = a[ai]
            merged = merged + 1
            ai = ai + 1
    return (out, inversions)

def binary_search(X, n):
    l = 0
    r = len(X) - 1
    while l <= r:
        m = l + (r - l) / 2
        print(l,m,r)
        if n == X[m]:
            return (X[m], m)
        elif n < X[m]:
            r = m - 1
        else:
            l = m + 1
    return (None, -1)

def pair_sum(S, x):
    S.sort()
    for n in S:
        d = x - n
        val, idx = binary_search(S, d)
        if idx != - 1:
            return (n, val)






